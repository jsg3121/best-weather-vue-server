"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAtmosDate = exports.changDateFormThreeHoursTime = exports.getWeeklyDateAfter3 = exports.getWeeklyTime = exports.getWeeklyDate = exports.getCurrentDate = exports.getCurrentTime = void 0;

var _dayjs = _interopRequireDefault(require("dayjs"));

var _timezone = _interopRequireDefault(require("dayjs/plugin/timezone"));

var _utc = _interopRequireDefault(require("dayjs/plugin/utc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_dayjs.default.extend(_utc.default);

_dayjs.default.extend(_timezone.default);
/**
 * ! 현재 날씨 상태 정보 시간 요청
 *
 * * 30분 이전일 때 전 시간 return
 *
 * @format "HHmm"
 * @return {string}
 */


var getCurrentTime = function getCurrentTime() {
  var TODAY = (0, _dayjs.default)(new Date()).tz("Asia/Seoul");

  if (TODAY.minute() <= 30) {
    return TODAY.subtract(1, "hour").format("HHmm");
  }

  return TODAY.format("HHmm");
};
/**
 * ! 현재 날씨 상태 정보 날짜 요청
 *
 * * 30분 이전일 때 요청 시간이 00시면 전날 23시로 return
 *
 * @format "YYYYMMDD"
 * @return {string}
 */


exports.getCurrentTime = getCurrentTime;

var getCurrentDate = function getCurrentDate() {
  var TODAY = (0, _dayjs.default)(new Date()).tz("Asia/Seoul");

  if (TODAY.minute() <= 30 && TODAY.hour() === 0) {
    return TODAY.subtract(1, "date").format("YYYYMMDD");
  }

  return TODAY.format("YYYYMMDD");
};
/**
 * ! 내일, 모레 최저, 최고기온 정보를 위한 날짜 요청
 * @format "YYYYMMDD"
 * @returns {string}
 */


exports.getCurrentDate = getCurrentDate;

var getWeeklyDate = function getWeeklyDate() {
  var TODAY = (0, _dayjs.default)(new Date()).tz("Asia/Seoul");

  if (parseInt(TODAY.format("HH"), 10) < 5) {
    return TODAY.subtract(1, "day").format("YYYYMMDD");
  } else {
    return TODAY.format("YYYYMMDD");
  }
};
/**
 * ! 내일 모레 최저, 최고기온 정보를 위한 시간
 * @format "HHmm"
 * @returns {string}
 */


exports.getWeeklyDate = getWeeklyDate;

var getWeeklyTime = function getWeeklyTime() {
  var TODAY = (0, _dayjs.default)(new Date()).tz("Asia/Seoul");
  var arr = [2, 5, 8, 11, 14, 17, 20, 23];
  var result = "";

  for (var i = 0; i < arr.length; i++) {
    var time = parseInt(TODAY.format("HH"), 10);

    if (time < 2) {
      result = "2300";
    } else {
      if (time > arr[i]) {
        String(arr[i]).length === 1 ? result = "0".concat(arr[i], "00") : result = "".concat(arr[i], "00");
      }
    }
  }

  return result;
};
/**
 * ! 3일 후 부터 날씨 정보 요청 시간
 * @format "YYYYMMDDHHmm"
 * @returns {string}
 */


exports.getWeeklyTime = getWeeklyTime;

var getWeeklyDateAfter3 = function getWeeklyDateAfter3() {
  var TODAY = (0, _dayjs.default)(new Date()).tz("Asia/Seoul");
  var date = TODAY.format("YYYYMMDD");
  var time = parseInt(TODAY.format("HH"), 10);
  return time >= 6 && time <= 17 ? "".concat(date, "0600") : "".concat(date, "1800");
};
/**
 * ! 3시간 단위 기온 정보
 * @format "HHmm"
 * @returns {string}
 */


exports.getWeeklyDateAfter3 = getWeeklyDateAfter3;

var changDateFormThreeHoursTime = function changDateFormThreeHoursTime() {
  var TODAY = (0, _dayjs.default)(new Date()).tz("Asia/Seoul");
  var hours = parseInt(TODAY.subtract(3, "hours").format("HH"), 10);

  if (hours % 3 === 2) {
    var res = TODAY.format(3 * Math.floor(hours / 3) + 2 > 10 ? "".concat(3 * Math.floor(hours / 3) + 2, "00") : "0".concat(3 * Math.floor(hours / 3) + 2, "00"));
    return res.toString();
  } else {
    var _res = TODAY.format(3 * Math.floor(hours / 3) - 1 > 10 ? "".concat(3 * Math.floor(hours / 3) - 1, "00") : "0".concat(3 * Math.floor(hours / 3) - 1, "00"));

    return _res.toString();
  }
};
/**
 * ! 대기환경(오존) 상태
 * @returns
 */


exports.changDateFormThreeHoursTime = changDateFormThreeHoursTime;

var getAtmosDate = function getAtmosDate() {
  var TODAY = (0, _dayjs.default)(new Date()).tz("Asia/Seoul").format("YYYYMMDD06");
  return TODAY;
};

exports.getAtmosDate = getAtmosDate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,