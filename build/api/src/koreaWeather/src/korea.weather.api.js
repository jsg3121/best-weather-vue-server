"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sunRiseFall = exports.livingInfomation = exports.threeHoursWeather = exports.getMaxMinTemperature = exports.getDailyWeather = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _console = require("console");

var _dayjs = _interopRequireDefault(require("dayjs"));

var _common = require("../../../../common");

var _global = require("../../../../common/src/global");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var getDailyWeather = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (data) {
    var BASE_TIME = (0, _common.defaultTime)();
    var BASE_DATE = (0, _common.defaultDate)();
    var nx = data.nx,
        ny = data.ny;
    var nowTemperatures = yield _axios.default.get("http://apis.data.go.kr/1360000/VilageFcstInfoService/getUltraSrtNcst?serviceKey=".concat(_global.KOREA_WEATHER_API_KEY, "&numOfRows=10&pageNo=1&dataType=json&base_date=").concat(BASE_DATE, "&base_time=").concat(BASE_TIME, "&nx=").concat(nx ? nx : 60, "&ny=").concat(ny ? ny : 127)).then(function (res) {
      var result = res.data.response.body.items.item;
      return result.filter(function (item) {
        return item.category === "T1H" || item.category === "REH" || item.category === "RN1" || item.category === "VEC" || item.category === "WSD";
      });
    });
    var newSky = yield _axios.default.get("http://apis.data.go.kr/1360000/VilageFcstInfoService/getUltraSrtFcst?serviceKey=".concat(_global.KOREA_WEATHER_API_KEY, "&numOfRows=50&pageNo=1&dataType=json&base_date=").concat(BASE_DATE, "&base_time=").concat(BASE_TIME, "&nx=").concat(nx ? nx : 60, "&ny=").concat(ny ? ny : 127)).then(function (res) {
      var result = res.data.response.body.items.item;
      return result.filter(function (item) {
        return item.category === "SKY";
      });
    });
    var minMax = yield _axios.default.get("http://apis.data.go.kr/1360000/VilageFcstInfoService/getVilageFcst?serviceKey=".concat(_global.KOREA_WEATHER_API_KEY, "&numOfRows=40&pageNo=1&dataType=json&base_date=").concat(BASE_DATE, "&base_time=0200&nx=").concat(nx ? nx : 60, "&ny=").concat(ny ? ny : 127)).then(function (res) {
      var result = res.data.response.body.items.item;
      return result.filter(function (item) {
        return item.category === "TMX" || item.category === "TMN";
      });
    });
    var currentWeather = {
      reh: nowTemperatures[0].obsrValue,
      rn1: nowTemperatures[1].obsrValue,
      t1h: nowTemperatures[2].obsrValue,
      vec: nowTemperatures[3].obsrValue,
      wsd: nowTemperatures[4].obsrValue,
      sky: newSky[0].fcstValue,
      tmn: minMax[0].fcstValue,
      tmx: minMax[1].fcstValue
    };
    return currentWeather;
  });

  return function getDailyWeather(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.getDailyWeather = getDailyWeather;

var getMaxMinTemperature = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(function* (data) {
    var WEEKLY_RES_DATE = (0, _common.checkWeeklyDate)();
    var nx = data.nx,
        ny = data.ny;
    var DATE = (0, _common.calcDate)();
    var weeklyRes = yield _axios.default.get("http://apis.data.go.kr/1360000/MidFcstInfoService/getMidTa?serviceKey=".concat(_global.KOREA_WEATHER_API_KEY, "&numOfRows=10&pageNo=&dataType=json&regId=11D20501&tmFc=").concat(WEEKLY_RES_DATE)).then(function (res) {
      return res.data.response.body.items.item[0];
    });
    var weeklyWeather = yield _axios.default.get("http://apis.data.go.kr/1360000/MidFcstInfoService/getMidLandFcst?serviceKey=".concat(_global.KOREA_WEATHER_API_KEY, "&numOfRows=100&pageNo=1&dataType=json&regId=11B00000&tmFc=").concat(WEEKLY_RES_DATE)).then(function (res) {
      return res.data.response.body.items.item[0];
    }); // 8시 이전일 때 전날 11시,
    // 8시 이후일 때 현재 11시\

    var tomorrowMinMax = yield _axios.default.get("http://apis.data.go.kr/1360000/VilageFcstInfoService/getVilageFcst?serviceKey=".concat(_global.KOREA_WEATHER_API_KEY, "&numOfRows=500&pageNo=1&dataType=json&base_date=").concat(DATE, "&base_time=0500&nx=").concat(nx ? nx : 60, "&ny=").concat(ny ? ny : 127)).then(function (res) {
      var temp = res.data.response.body.items.item.filter(function (item) {
        return item.fcstDate === (0, _dayjs.default)(DATE).add(1, "day").format("YYYYMMDD") && (item.category === "TMN" || item.category === "TMX") || item.fcstDate === (0, _dayjs.default)(DATE).add(2, "day").format("YYYYMMDD") && (item.category === "TMN" || item.category === "TMX");
      });
      var tmn = temp[0].fcstTime;
      var tmx = temp[1].fcstTime;
      var sky = res.data.response.body.items.item.filter(function (item) {
        return item.fcstDate === (0, _dayjs.default)(DATE).add(1, "day").format("YYYYMMDD") && (item.category === "SKY" || item.category === "PTY") && (item.fcstTime === tmn || item.fcstTime === tmx) || item.fcstDate === (0, _dayjs.default)(DATE).add(2, "day").format("YYYYMMDD") && (item.category === "SKY" || item.category === "PTY") && (item.fcstTime === tmn || item.fcstTime === tmx);
      });
      var data = {
        day1: {
          date: temp[0].fcstDate,
          tmnValue: temp[0].fcstValue,
          tmxValue: temp[1].fcstValue,
          tmnPty: sky[0].fcstValue,
          tmnSky: sky[1].fcstValue,
          tmxPty: sky[2].fcstValue,
          tmxSky: sky[3].fcstValue
        },
        day2: {
          date: temp[2].fcstDate,
          tmnValue: temp[2].fcstValue,
          tmxValue: temp[3].fcstValue,
          tmnPty: sky[4].fcstValue,
          tmnSky: sky[5].fcstValue,
          tmxPty: sky[6].fcstValue,
          tmxSky: sky[7].fcstValue
        }
      };
      (0, _console.table)(data);
      return data;
    });
    var weekOut = {
      day3: {
        min: weeklyRes.taMin3,
        max: weeklyRes.taMax3,
        rnstAm: weeklyWeather.rnSt3Am,
        rnstPm: weeklyWeather.rnSt3Pm,
        wfAm: weeklyWeather.wf3Am,
        wfPm: weeklyWeather.wf3Pm,
        dateNum: 3
      },
      day4: {
        min: weeklyRes.taMin4,
        max: weeklyRes.taMax4,
        rnstAm: weeklyWeather.rnSt4Am,
        rnstPm: weeklyWeather.rnSt4Pm,
        wfAm: weeklyWeather.wf4Am,
        wfPm: weeklyWeather.wf4Pm,
        dateNum: 4
      },
      day5: {
        min: weeklyRes.taMin5,
        max: weeklyRes.taMax5,
        rnstAm: weeklyWeather.rnSt5Am,
        rnstPm: weeklyWeather.rnSt5Pm,
        wfAm: weeklyWeather.wf5Am,
        wfPm: weeklyWeather.wf5Pm,
        dateNum: 5
      },
      day6: {
        min: weeklyRes.taMin6,
        max: weeklyRes.taMax6,
        rnstAm: weeklyWeather.rnSt6Am,
        rnstPm: weeklyWeather.rnSt6Pm,
        wfAm: weeklyWeather.wf6Am,
        wfPm: weeklyWeather.wf6Pm,
        dateNum: 6
      },
      day7: {
        min: weeklyRes.taMin7,
        max: weeklyRes.taMax7,
        rnstAm: weeklyWeather.rnSt7Am,
        rnstPm: weeklyWeather.rnSt7Pm,
        wfAm: weeklyWeather.wf7Am,
        wfPm: weeklyWeather.wf7Pm,
        dateNum: 7
      }
    };
    console.table(weekOut);
    return {
      tomorrowMinMax: tomorrowMinMax,
      weekOut: weekOut
    };
  });

  return function getMaxMinTemperature(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

exports.getMaxMinTemperature = getMaxMinTemperature;

var threeHoursWeather = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator(function* (data) {
    var nx = data.nx,
        ny = data.ny;
    var BASE_DATE = (0, _common.defaultDate)();
    var R06 = [];
    var S06 = [];
    var PTY = [];
    var SKY = [];
    var T3H = [];
    var time = (0, _common.changDateFormThreeHoursTime)();
    var res = yield _axios.default.get("http://apis.data.go.kr/1360000/VilageFcstInfoService/getVilageFcst?serviceKey=".concat(_global.KOREA_WEATHER_API_KEY, "&numOfRows=180&pageNo=1&dataType=json&base_date=").concat(BASE_DATE, "&base_time=").concat(time, "&nx=").concat(nx ? nx : 60, "&ny=").concat(ny ? ny : 127)).then(function (res) {
      return res.data.response.body.items.item;
    });
    res.map(function (item) {
      switch (item.category) {
        case "R06":
          {
            R06.push({
              date: item.fcstDate,
              time: item.fcstTime,
              value: item.fcstValue
            });
          }
          return;

        case "S06":
          {
            S06.push({
              date: item.fcstDate,
              time: item.fcstTime,
              value: item.fcstValue
            });
          }
          return;

        case "PTY":
          {
            PTY.push({
              date: item.fcstDate,
              time: item.fcstTime,
              value: item.fcstValue
            });
          }
          return;

        case "SKY":
          {
            SKY.push({
              date: item.fcstDate,
              time: item.fcstTime,
              value: item.fcstValue
            });
          }
          return;

        case "T3H":
          {
            T3H.push({
              date: item.fcstDate,
              time: item.fcstTime,
              value: item.fcstValue
            });
          }
          return;

        default:
          return;
      }
    });
    var out = {
      R06: R06,
      PTY: PTY,
      SKY: SKY,
      T3H: T3H,
      S06: S06
    };
    return out;
  });

  return function threeHoursWeather(_x3) {
    return _ref3.apply(this, arguments);
  };
}();

exports.threeHoursWeather = threeHoursWeather;

var livingInfomation = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator(function* () {
    var BASE_DATE = (0, _common.defaultDate)();
    var BASE_TIME = (0, _common.defaultTime)();
    var area = "서울";
    var encoding = encodeURIComponent(area); // const requestDate = changDateFormMiniDust();

    var out = [];
    var res = yield _axios.default.get("http://apis.data.go.kr/B552584/ArpltnInforInqireSvc/getCtprvnRltmMesureDnsty?sidoName=".concat(encoding, "&pageNo=1&numOfRows=200&returnType=json&serviceKey=").concat(_global.KOREA_WEATHER_API_KEY, "&ver=1.3")).then(function (res) {
      console.log(res);
      return res.data.response.body.items;
    });
    res.map(function (list) {
      out.push({
        sidoName: list.sidoName,
        pm10Value: list.pm10Value,
        pm25Value: list.pm25Value,
        o3Value: list.o3Value
      });
    }); // const minidust = await axios.get(`http://apis.data.go.kr/B552584/ArpltnInforInqireSvc/getMinuDustWeekFrcstDspth?searchDate=${requestDate}&returnType=json&serviceKey=${APIKEY}&numOfRows=50&pageNo=1`).then((res) => {
    //   return res.data.response.body.items;
    // });
    // const minimumDust = formDataMiniDust(minidust);

    var uv = yield _axios.default.get("http://apis.data.go.kr/1360000/LivingWthrIdxService01/getUVIdx?serviceKey=".concat(_global.KOREA_WEATHER_API_KEY, "&dataType=json&areaNo=1100000000&time=").concat(BASE_DATE).concat(BASE_TIME.substr(0, 2))).then(function (res) {
      return res.data.response.body.items.item[0];
    });
    var uvValue = {
      date: uv.date,
      today: uv.today,
      tomorrow: uv.tomorrow,
      theDayAfterTomorrow: uv.theDayAfterTomorrow
    };
    return {
      out: out,
      uvValue: uvValue
    };
  });

  return function livingInfomation() {
    return _ref4.apply(this, arguments);
  };
}();

exports.livingInfomation = livingInfomation;

var sunRiseFall = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator(function* () {
    var BASE_DATE = (0, _common.defaultDate)();
    var area = "서울";
    var encoding = encodeURIComponent(area);
    var res = yield _axios.default.get("http://apis.data.go.kr/B090041/openapi/service/RiseSetInfoService/getAreaRiseSetInfo?location=".concat(encoding, "&locdate=").concat(BASE_DATE, "&ServiceKey=").concat(_global.KOREA_WEATHER_API_KEY)).then(function (res) {
      return res.data.response.body.items.item;
    });
    var output = [];
    output.push({
      sunrise: res.sunrise,
      sunset: res.sunset,
      moonrise: res.moonset,
      moonset: res.moonrise
    });
    return output;
  });

  return function sunRiseFall() {
    return _ref5.apply(this, arguments);
  };
}();

exports.sunRiseFall = sunRiseFall;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,